{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Template for cp": {
		"prefix": "cp",
		"scope": "java",
		"body": [
			"// Abhishek Pathak - scor32k",
			"// Date: $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND",
			"",
			"",
			"import java.io.BufferedReader;",
			"import java.io.IOException;",
			"import java.io.InputStreamReader;",
			"import java.io.PrintWriter;",
			"import java.io.InputStream;",
			"import java.util.StringTokenizer;",
			"import java.util.ArrayList;",
			"import java.util.Arrays;",
			"import java.util.Collections;",
			"import java.util.Random;",
			"",
			"public class A$1 {",
			"    public static void main(String[] args) throws Exception {",
			"        FastScanner fs = new FastScanner(System.in);",
			"        PrintWriter out = new PrintWriter(System.out);",
			"        int T = fs.nextInt();",
			"        $2",	
			"        for (int tt = 0; tt < T; tt++) {",
			"            $3",
			"        }",
			"",
			"        out.close();",
			"    }",
			"",
			"    static class FastScanner {",
			"        private BufferedReader reader = null;",
			"        private StringTokenizer tokenizer = null;",
			"",
			"        public FastScanner(InputStream in) {",
			"            reader = new BufferedReader(new InputStreamReader(in));",
			"            tokenizer = null;",
			"        }",
			"",
			"        public String next() {",
			"            if (tokenizer == null || !tokenizer.hasMoreTokens()) {",
			"                try {",
			"                    tokenizer = new StringTokenizer(reader.readLine());",
			"                } catch (IOException e) {",
			"                    throw new RuntimeException(e);",
			"                }",
			"            }",
			"            return tokenizer.nextToken();",
			"        }",
			"",
			"        public String nextLine() {",
			"            if (tokenizer == null || !tokenizer.hasMoreTokens()) {",
			"                try {",
			"                    return reader.readLine();",
			"                } catch (IOException e) {",
			"                    throw new RuntimeException(e);",
			"                }",
			"            }",
			"",
			"            return tokenizer.nextToken();",
			"        }",
			"",
			"        public long nextLong() {",
			"            return Long.parseLong(next());",
			"        }",
			"",
			"        public int nextInt() {",
			"            return Integer.parseInt(next());",
			"        }",
			"",
			"        public double nextDouble() {",
			"            return Double.parseDouble(next());",
			"        }",
			"",
			"        public int[] nextIntArray(int n) {",
			"            int[] a = new int[n];",
			"            for (int i = 0; i < n; i++)",
			"                a[i] = nextInt();",
			"            return a;",
			"        }",
			"",
			"        public long[] nextLongArray(int n) {",
			"            long[] a = new long[n];",
			"            for (int i = 0; i < n; i++)",
			"                a[i] = nextLong();",
			"            return a;",
			"        }",
			"    }",
			"",
			"    static int min(int a, int b, int c) {",
			"        return Math.min(a, Math.min(b, c));",
			"    }",
			"",
			"    static int min(int a, int b) {",
			"        return Math.min(a, b);",
			"    }",
			"",
			"    private static void swapinarray(int[] arr, int i, int j) {",
			"        int tmp = arr[i];",
			"        arr[i] = arr[j];",
			"        arr[j] = tmp;",
			"    }",
			"",
			"    private static void quickSort(int[] arr, int left, int right) {",
			"        if (left < right) {",
			"            int partition = qucickS(arr, left, right);",
			"            quickSort(arr, left, partition - 1);",
			"            quickSort(arr, partition + 1, right);",
			"        }",
			"    }",
			"",
			"    private static int qucickS(int[] arr, int left, int right) {",
			"        int pivot = arr[left];",
			"        int i = left;",
			"        int j = right;",
			"",
			"        while (i < j) {",
			"            while (arr[i] <= pivot && i <= right - 1) {",
			"                i++;",
			"            }",
			"            while (arr[j] >= pivot && j >= left + 1) {",
			"                j--;",
			"            }",
			"            if (i < j) {",
			"                swapinarray(arr, i, j);",
			"            }",
			"        }",
			"        swapinarray(arr, j, left);",
			"        return j;",
			"    }",
			"}",
		]
	}
}
